#include <SDL.h>
#include <SDL_opengl.h>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;

#define PI (double)3.14159265358979323846

void base(GLfloat raio, GLint segmentos)
{
	GLfloat  alpha;
	int      i;

    alpha = 2*PI / segmentos;
	
	glBegin(GL_POLYGON);
	
		glColor3f(1,1,1);
		glNormal3f(0.0,0.0,1.0);
		for(i=0; i<segmentos ;i++)
		{
			glVertex3f(cos(alpha*i)*raio,sin(alpha*i)*raio,0.0);
		}
	glEnd();
}

void corpo( GLfloat raio, GLfloat altura, GLint segmentos)
{
	GLfloat  alpha;
	int      i;

	alpha = 2*PI / segmentos;

		glColor3f(0,0,0);
	glBegin(GL_QUADS);
			
		for(i=0; i<segmentos ;i++)
		{
			glNormal3f(cos(alpha*i),sin(alpha*i),0.0);
			glVertex3f(cos(alpha*i)*raio,sin(alpha*i)*raio,altura/2);
			glVertex3f(cos(alpha*i)*raio,sin(alpha*i)*raio,-altura/2);
			glNormal3f(cos(alpha*(i+1)),sin(alpha*(i+1)),0.0);
			glVertex3f(cos(alpha*(i+1))*raio,sin(alpha*(i+1))*raio,-altura/2);
			glVertex3f(cos(alpha*(i+1))*raio,sin(alpha*(i+1))*raio,altura/2);
		}
	glEnd();
}

void drawCilindro( GLfloat raioBase, GLfloat altura, GLint segmentos)
{

	glPushMatrix();
		glTranslatef(0.0,0.0,altura/2);
		base(raioBase,segmentos);
	glPopMatrix();

	glPushMatrix();
		glTranslatef(0.0,0.0,-altura/2);
        glRotatef(180,1,0,0); // para as normais ficarem para fora
		base(raioBase,segmentos);
	glPopMatrix();
	
	corpo(raioBase, altura, segmentos);

}
void drawCubo(){
	// Desenha um cubo
	glBegin(GL_QUADS);			// Face posterior
		glNormal3f(0.0, 0.0, 1.0);	// Normal da face
		glVertex3f(0.05, 0.05, 0.05);
		glVertex3f(-0.05, 0.05, 0.05);
		glVertex3f(-0.05, -0.05, 0.05);
		glVertex3f(0.05, -0.05, 0.05);
	glEnd();

	glBegin(GL_QUADS);			// Face frontal
		glNormal3f(0.0, 0.0, -1.0); 	// Normal da face
		glVertex3f(0.05, 0.05, -0.05);
		glVertex3f(0.05, -0.05, -0.05);
		glVertex3f(-0.05, -0.05, -0.05);
		glVertex3f(-0.05, 0.05, -0.05);
	glEnd();
	glBegin(GL_QUADS);			// Face lateral esquerda
		glNormal3f(-1.0, 0.0, 0.0); 	// Normal da face
		glVertex3f(-0.05, 0.05, 0.05);
		glVertex3f(-0.05, 0.05, -0.05);
		glVertex3f(-0.05, -0.05, -0.05);
		glVertex3f(-0.05, -0.05, 0.05);
	glEnd();
	glBegin(GL_QUADS);			// Face lateral direita
		glNormal3f(1.0, 0.0, 0.0);	// Normal da face
		glVertex3f(0.05, 0.05, 0.05);
		glVertex3f(0.05, -0.05, 0.05);
		glVertex3f(0.05, -0.05, -0.05);
		glVertex3f(0.05, 0.05, -0.05);
	glEnd();
	glBegin(GL_QUADS);			// Face superior
		glNormal3f(0.0, 1.0, 0.0);  	// Normal da face
		glVertex3f(-0.05, 0.05, -0.05);
		glVertex3f(-0.05, 0.05, 0.05);
		glVertex3f(0.05, 0.05, 0.05);
		glVertex3f(0.05, 0.05, -0.05);
	glEnd();
	glBegin(GL_QUADS);			// Face inferior
		glNormal3f(0.0, -1.0, 0.0); 	// Normal da face
		glVertex3f(-0.05, -0.05, -0.05);
		glVertex3f(0.05, -0.05, -0.05);
		glVertex3f(0.05, -0.05, 0.05);
		glVertex3f(-0.05, -0.05, 0.05);
	glEnd();
}

int main( int argc, char* args[] ) {
    SDL_Window* window = NULL;
    //SDL_Event e;

    if(SDL_Init(SDL_INIT_VIDEO |
                SDL_INIT_AUDIO |
                SDL_INIT_EVENTS |
                SDL_INIT_TIMER) < 0) {
        printf("Erro de inicialização do SDL: %s\n",
                SDL_GetError());
    } else {
        window = SDL_CreateWindow(
                "The Claw",
                SDL_WINDOWPOS_CENTERED,
                SDL_WINDOWPOS_CENTERED,
                SCREEN_WIDTH,
                SCREEN_HEIGHT,
                SDL_WINDOW_OPENGL);

        SDL_GLContext glContext = SDL_GL_CreateContext(window);
        SDL_Event windowEvent;
        bool quit;

        while(!quit) {
            if(SDL_PollEvent(&windowEvent)) {
                if(windowEvent.type == SDL_QUIT) {
                    quit = true;
                }
            }

            glClearColor(1.f, 1.f, 1.f, 1.f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	    glPushMatrix();
	    //drawCubo();
    	    glRotatef(30,1,0,0);
    	    glTranslatef(0.05,0,0);
    	    
    	    glRotatef(15,0,1,0);
	    glBegin(GL_QUADS);
	    	glColor3f(0,0,0);
	     	glVertex3f(0.8f,3.0f,1.8f);
	     	glColor3f(1,1,1);
	     	glVertex3f(1.0f,-4.8f,-2.0f);
	     	glColor3f(1,1,1);
	     	glVertex3f(-1.5f,-4.8f,-2.0f);
		glColor3f(0,0,0);
	     	glVertex3f(-0.8f,3.0f,1.8f);
	     glEnd();
	     
	    
	    glRotatef(40,1,0,0);
	    glTranslatef(0.8,0,0);
	    drawCilindro(0.08,0.1,10);
	    
	    glPushMatrix(); 
	    
	    	glRotatef(95,0,0,1);
	    	glTranslatef(-0.3,0,0);
	    	glScalef(4,0.55,0.55);
	    	drawCubo();
    	    glPopMatrix();
    	    
	    glPushMatrix();
	    	
	    	glRotatef(85,0,0,1);
	    	glTranslatef(0,0.2,0.2);
	    	glRotatef(90,1,0,0);
	    	glTranslatef(0,-0.005,0.12);
	    	drawCilindro(0.035,0.10,10);
    	    glPopMatrix(); 
	    
	    
	    glPushMatrix(); 
	    
	    	glRotatef(-90,0,1,0);
	    	glTranslatef(-0.25,-0.7,-0.1);
	    	glScalef(4,0.55,0.55);
	    	glRotatef(45,0,1,0);
	    	drawCubo();
    	    glPopMatrix();
	    
    	     glPopMatrix();
    	
            SDL_GL_SwapWindow(window);
        }

        SDL_GL_DeleteContext(glContext);
        SDL_DestroyWindow(window);
    }

    SDL_Quit();

    return 0;
}
